#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_42keys.h"

#include "zmk-helpers/helper.h"

#define DEF 0
#define DIA 1
#define SYM 2
#define NAV 3
#define NUM 4
#define FUN 5

#define ___ &trans

#define QUICK_TAP_MS 175

/* Global settings */


&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

/*
  layer-tap config
  Quickly tap-tap-holding the lt button will repeat the tap behavior
  For example enter-enter-hold, will output multiple enter while you
  keep holding the key.
  But holding enter without double tapping, will activate the layer.
*/ 
&lt { 
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

#include "combos.dtsi"

/* Smart layers */

// &caps_word {  // mods deactivate caps-word, requires PR #1451
//     continue-list = <UNDERSCORE MINUS LCTRL LALT LGUI LSHFT RCTRL RALT RGUI RSHFT BACKSPACE HASH AT AGRV EACU EGRV UGRV CARET COMMA DOT SQT>;
//     /delete-property/ ignore-numbers;
//     /delete-property/ ignore-modifiers;
// };


// &num_word {  // num-word, requires PR #1451
//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS ASTR SLSH EQUAL>;
//     ignore-modifiers;
//     ignore-numbers;
// };

// / {
//   behaviors {
//     nav_word: nav_word {
//       compatible = "zmk,behavior-auto-layer";
//       #binding-cells = <1>;
//       continue-list = <LEFT DOWN UP RIGHT PG_UP PG_DN KK_UNDO KK_CUT KK_COPY KK_PASTE>;
//       ignore-modifiers;
//     };
//   };
// };

// ZMK_AUTO_LAYER(nav_word,
//     continue-list = <LEFT DOWN UP RIGHT PG_UP PG_DN KK_UNDO KK_CUT KK_COPY KK_PASTE>;
//     ignore-modifiers;
// );

ZMK_TRI_STATE(swapper,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)

ZMK_TAP_DANCE(a_dance, bindings = <&kp A>, <&sl NUM>;
              tapping-term-ms = <200>;)

// ALIASES
#define KK_CUT     LC(BE_X)
#define KK_COPY    LC(BE_C)
#define KK_PASTE   LC(BE_V)
#define KK_UNDO    LC(BE_Z)
#define KK_REDO    LC(BE_Y)
#define KK_SAVE    LC(BE_S)
#define KK_RELOAD  LC(LS(BE_R))
#define KK_EUR     RA(N5)

// DIACRITICS
ZMK_MACRO(fr_e_aigu, bindings = <&kp RALT &kp APOS &kp E>;) // é
ZMK_MACRO(fr_e_grave, bindings = <&kp RALT &kp GRAVE &kp E>;) // è
ZMK_MACRO(fr_a_grave, bindings = <&kp RALT &kp GRAVE &kp A>;) // à
ZMK_MACRO(fr_u_grave, bindings = <&kp RALT &kp GRAVE &kp U>;) // ù
ZMK_MACRO(fr_c_cedille, bindings = <&kp RALT &kp COMMA &kp C>;) // ç
ZMK_MACRO(fr_a_cironfl, bindings = <&kp RALT &kp LS(N6) &kp A>;) // â
ZMK_MACRO(fr_e_cironfl, bindings = <&kp RALT &kp LS(N6) &kp E>;) // ê
ZMK_MACRO(fr_i_cironfl, bindings = <&kp RALT &kp LS(N6) &kp I>;) // î
ZMK_MACRO(fr_o_cironfl, bindings = <&kp RALT &kp LS(N6) &kp O>;) // ô
ZMK_MACRO(fr_u_cironfl, bindings = <&kp RALT &kp LS(N6) &kp U>;) // û
ZMK_MACRO(fr_e_trema, bindings = <&kp RALT &kp LS(APOS) &kp E>;) // ë
// ZMK_MACRO(fr_i_trema, bindings = <&kp RALT &kp LS(QUOTE) &kp I>;) // ï



/*
          ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
          │     │  Q  │  W  │  F  │  P  │  B  │   │  J  │  L  │  U  │  Y  │ ' * │     │
          │     │  A  │  R  │  S  │  T  │  G  │   │  M  │  N  │  E  │  I  │  O  │     │
          │     │  Z  │  X  │  C  │  D  │  V  │   │  K  │  H  │ ,<  │  .> │ / ? │     │
          ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                            │ ESC │ SPC │ TAB │   │Enter│ BSPC│ DEL │
                            ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/
ZMK_LAYER(DEFAULT,
  ___   &kp Q         &kp W         &kp F          &kp P          &kp B        &kp J         &kp L          &kp U          &kp Y         &kp SQT          &kp PSCRN
  ___   &hml LGUI A   &hml LALT R   &hml LCTRL S   &hml LSHFT T   &kp G        &kp M         &hmr RSHFT N   &hmr RCTRL E   &hmr LALT I   &hmr RGUI O      &kp SQT
  ___   &kp Z         &hml RALT X   &kp C          &kp D          &kp V        &lt DIA K     &kp H          &kp COMMA      &hmr RALT DOT &kp FSLH         ___
                      &lt FUN ESC   &lt NAV SPACE  &kp TAB        &lt SYM ENTER    &lt NUM BSPC  &kp DEL
)

/*
          ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
          │     │  â  │     │  ê  │     │     │   │     │     │  û  │     │     │     │
          │     │  à  │  é  │  è  │  ë  │     │   │     │     │  ù  │  î  │  ô  │     │
          │     │     │     │  ç  │     │     │   │     │  X  │     │     │     │     │
          ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                            │     │     │     │   │     │     │     │
                            ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/
ZMK_LAYER(DIACRITICS,
  ___   &fr_a_cironfl   &fr_e_cironfl   ___   ___   ___                ___   ___   &fr_u_cironfl   ___   ___   ___
  ___   &fr_a_grave     &fr_e_aigu   &fr_e_grave   &fr_e_trema ___     ___   ___   &fr_u_grave   &fr_i_cironfl   &fr_o_cironfl   ___
  ___   ___             &fr_c_cedille   ___   ___  ___                 ___   ___   ___   ___   ___   ___
                                                   ___   ___   ___     ___   ___   ___
)

/*
          ┌─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
          │  ´  │  `  │  <  │  >  │  -  │  |  │   │  #  │  {  │  }  │  $  │  '  │  €  │
          │  ?  │  !  │  *  │  \  │  =  │  &  │   │  :  │  (  │  )  │  ;  │  "  │     │
          │  _  │  ~  │  +  │  [  │  ]  │  %  │   │  @  │  ^  │  ,  │  .  │  /  │     │
          ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                            │     │     │     │   │     │  X  │     │
                            ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/

ZMK_LAYER(SYMBOLS,
  &kp RA(QUOTE)   &kp GRAVE     &kp LT      &kp GT     &kp MINUS    &kp PIPE         &kp HASH     &kp LBRC     &kp RBRC     &kp DLLR     &kp SQT   &kp KK_EUR
  &kp QMARK       &kp EXCL      &kp STAR    &kp BSLH   &kp EQUAL    &kp AMPS         &kp COLON    &kp RPAR     &kp LPAR     &kp SEMI     &kp DQT   ___
  &kp UNDER       &kp TILDE     &kp PLUS    &kp LBKT   &kp RBKT     &kp PRCNT        &kp AT       &kp CARET    &kp COMMA    &kp DOT      &kp SLSH  ___
                                            ___        ___          ___              ___          ___          ___
)

/*
          ┌─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
          │     │     │     │ SWAP│     |     │   │REDO │PASTE│COPY │ CUT │UNDO │SAVE │
          │     │ GUI │ ALT │CTRL │SHIFT│     │   │CAPS │  ←  │  ↓  │  ↑  │  →  │RELOAD│
          │     │     │     │     │     │     │   │ INS │HOME │ PDN │ PUP │ END │PSCRN│
          ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                            │     │  X  │     │   │     │     │     │
                            ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/

ZMK_LAYER(NAVIG,
  ___  ___           ___          &swapper      ___         ___      &kp KK_REDO    &kp KK_PASTE   &kp KK_COPY    &kp KK_CUT    &kp KK_UNDO   &kp KK_SAVE
  ___  &kp LGUI     &kp LALT      &kp LCTRL     &kp LSHFT   ___      &kp CAPS       &kp LEFT       &kp DOWN       &kp UP        &kp RIGHT     &kp KK_RELOAD
  ___  ___          &kp RALT      ___           ___         ___      &kp INS        &kp HOME       &kp PG_DN      &kp PG_UP     &kp END       &kp PSCRN
                                  ___           ___         ___      ___            ___            ___
)


/*
          ┌─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
          │     │     │  7  │  8  │  9  │     │   │     │     │     │     │     │     │
          │     │  0  │  4  │  5  │  6  │     │   │     │ SHIFT│CTRL│ ALT │ GUI │     │
          │     │     │  1  │  2  │  3  │     │   │     │     │     │     │     │     │
          ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                            │     │     │     │   │  X  │     │     │
                            ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/

ZMK_LAYER(NUMBERS,
  ___   ___             &kp KP_N7      &kp KP_N8       &kp KP_N9   ___      ___    ___    ___    ___   ___    ___
  ___   &kp KP_N0       &kp KP_N4      &kp KP_N5       &kp KP_N6   ___      ___    &kp LSHFT     &kp LCTRL     &kp LALT      &kp LGUI    ___
  ___   ___             &kp KP_N1      &kp KP_N2       &kp KP_N3   ___      ___    ___    ___    ___   ___    ___
                                       ___             ___         ___      ___    ___    ___
)



/*
          ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
          │     │ F12 │ F7  │ F8  │ F9  │     │   │     │ PREV│VDWN │ VUP │ NEXT│     │
          │     │ F11 │ F4  │ F5  │ F6  │     │   │     │ SHIFT│CTRL│ ALT │ GUI │     │
          │     │ F10 │ F1  │ F2  │ F3  │     │   │     │     │     │     │     │     │
          ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                            │  X  │     │     │   │ STOP│PAUSE│ MUTE│
                            ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/
ZMK_LAYER(FUNCTION,
   ___   &kp F12       &kp F7        &kp F8        &kp F9   ___        ___         &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  ___
   ___   &kp F11       &kp F4        &kp F5        &kp F6   ___        ___         &kp LSHFT     &kp LCTRL     &kp LALT      &kp LGUI    ___
   ___   &kp F10       &kp F1        &kp F2        &kp F3   ___        ___         ___           ___           ___           ___         &bootloader
                                     ___           ___      ___        &kp C_STOP  &kp C_PP      &kp C_MUTE
)

